from hstest import *
import numpy as np
import re


dict_answers_CORRECT = {
    "mean": 33.75,
    "standarddeviation": 32.19,
    "max": 202.98
}

dict_img1_data_CORRECT = {
    "control_yaxis": [29, 31, 35, 35, 25, 31, 30, 30, 36, 27, 29, 29, 33],
    "experimental_yaxis": [30, 30, 43, 27, 42, 33, 27, 31, 26, 22, 24, 31, 34],
    "xaxis": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]  # in this version this data is not used
    # tests don't check x-axis data because that causes incorrect fails on a correct solution using matplotlib
}

dict_img2_data_CORRECT = {
    "control": np.array([4.51, 31.32, 19.92, 10.21, 62.83, 19.93, 14.39, 49.08, 25.31, 12.03, 65.08, 23.01, 14.06, 8.15, 38.58, 6.22, 16.08, 44.39, 17.09, 12.15, 13.74, 26.25, 12.63, 6.07, 7.99, 25.73, 20.82, 42.73, 12.33, 37.71, 7.54, 37.88, 7.61, 25.45, 11.58, 13.07, 68.7, 43.02, 43.05, 4.35, 85.68, 17.24, 28.4, 48.8, 19.3, 32.09, 35.35, 51.95, 5.57, 7.14, 16.45, 19.28, 13.27, 9.89, 13.33, 3.16, 54.28, 4.75, 26.41, 50.22, 6.3, 8.9, 119.31, 11.25, 70.63, 17.79, 90.63, 7.76, 11.85, 26.74, 10.9, 3.85, 53.87, 43.18, 7.54, 24.28, 2.41, 20.93, 25.19, 13.78, 6.07, 11.83, 6.84, 22.44, 2.39, 1.3, 22.59, 6.26, 40.14, 148.87, 10.51, 22.78, 11.33, 23.11, 2.73, 63.54, 7.7, 8.65, 12.45, 5.15, 6.71, 4.65, 31.1, 17.96, 20.41, 28.71, 16.2, 29.86, 196.98, 5.56, 37.92, 11.61, 18.48, 11.78, 1.45, 26.29, 13.76, 32.01, 6.41, 7.33, 14.93, 400.46, 16.56, 3.53, 62.23, 60.16, 56.47, 5.56, 19.46, 18.87, 24.94, 763.32, 12.86, 44.4, 24.82, 8.03, 48.27, 6.97, 11.87, 18.28, 16.13, 13.25, 28.54, 54.82, 8.52, 190.87, 3.62, 41.41, 40.51, 12.72, 14.25, 11.39, 60.81, 54.48, 18.3, 5.34, 25.84, 8.01, 16.59, 89.8, 66.57, 38.79, 32.27, 5.22, 6.74, 52.0, 8.97, 6.75, 43.92, 8.87, 20.4, 24.31, 32.03, 12.49, 37.51, 8.2, 162.04, 17.97, 17.74, 29.52, 5.99, 29.52, 19.14, 13.08, 6.75, 20.33, 10.87, 32.17, 173.21, 3.21, 6.94, 29.73, 6.65, 20.19, 72.26, 129.74, 109.02, 5.64, 18.81, 18.75, 163.75, 9.5, 21.97, 149.72, 3.8, 29.09, 26.49, 27.52, 17.88, 42.68, 25.8, 17.49, 25.29, 64.92, 25.0, 22.94, 17.91, 19.79, 4.4, 60.5, 25.98, 8.75, 86.09, 6.76, 31.03, 9.78, 7.09, 195.31, 53.86, 15.86, 17.87, 43.8, 5.56, 22.48, 24.73, 17.08, 15.55, 134.6, 34.97, 14.78, 107.25, 11.93, 7.05, 15.67, 56.81, 39.45, 21.58, 6.07, 41.71, 17.77, 5.62, 13.02, 20.82, 1.55, 9.91, 13.05, 50.99, 60.17, 23.61, 12.28, 12.29, 31.88, 9.96, 7.14, 18.74, 6.82, 77.81, 39.75, 21.64, 51.76, 3.59, 26.14, 9.79, 28.37, 29.81, 22.74, 58.48, 32.96, 25.27, 7.62, 39.04, 34.86, 5.86, 15.51, 32.41, 17.23, 14.62, 8.31, 34.23, 7.79, 21.2, 38.28, 30.77, 45.58, 40.92, 5.6, 44.84, 12.82, 5.9, 42.28, 72.43, 25.8, 49.92, 62.52, 12.83, 9.81, 27.1, 65.95, 24.75, 39.22, 11.6, 9.29, 45.93, 35.25, 47.4, 42.08, 20.71, 104.68, 10.85, 2.59, 3.01, 34.75, 118.44, 16.97, 4.16, 34.87, 3.99, 115.22, 7.24, 59.74, 154.48, 7.65, 15.42, 21.78, 66.79, 62.5, 68.01, 242.5, 67.0, 8.29, 36.45, 73.47, 14.51, 41.73, 35.2, 9.65, 5.38, 1.92, 10.04, 5.41, 6.81, 15.53, 215.59, 37.67, 6.31, 30.52, 10.05, 56.07, 55.16, 69.76, 1.38, 15.92, 33.21, 7.8, 39.34, 37.47, 22.52, 27.83, 27.55, 6.34, 14.98, 61.4, 17.69, 35.6, 56.33, 103.75, 27.48, 25.28, 43.94, 88.56, 60.23, 80.78, 16.3, 13.27, 19.7, 55.38, 24.48, 43.81, 7.59, 11.58, 34.94, 45.4, 94.42, 32.25, 26.34, 23.51, 84.39, 9.07, 9.02, 34.66]),
    "experimental": np.array([78.26, 9.53, 17.25, 30.48, 32.25, 38.09, 17.83, 37.1, 49.94, 41.6, 18.03, 71.95, 35.52, 23.87, 72.57, 14.9, 12.76, 66.17, 60.28, 35.81, 17.93, 27.78, 13.54, 92.09, 16.04, 17.39, 13.8, 40.97, 7.45, 23.77, 40.66, 13.61, 17.61, 35.73, 61.38, 40.86, 13.7, 12.07, 28.44, 29.61, 40.94, 71.08, 58.0, 14.03, 10.35, 16.51, 26.71, 91.68, 12.82, 24.87, 14.75, 14.97, 19.07, 155.72, 20.93, 41.35, 38.03, 125.31, 40.23, 38.41, 26.93, 31.45, 26.82, 17.78, 30.94, 68.83, 37.88, 14.2, 9.85, 13.65, 22.13, 201.31, 45.04, 28.59, 70.92, 38.01, 31.0, 43.51, 34.54, 60.48, 12.97, 19.33, 38.25, 23.97, 30.75, 45.22, 20.51, 12.75, 12.22, 38.27, 68.52, 27.58, 18.15, 90.39, 26.33, 31.98, 11.38, 23.91, 8.73, 21.55, 113.25, 168.04, 51.58, 31.29, 20.25, 59.86, 23.79, 66.23, 46.51, 11.9, 12.34, 169.75, 33.55, 14.15, 31.31, 18.33, 18.49, 19.08, 27.64, 32.34, 7.55, 22.2, 79.47, 14.87, 109.75, 45.75, 47.73, 11.6, 15.79, 110.68, 73.0, 221.59, 55.08, 13.09, 44.79, 64.48, 47.71, 12.94, 24.75, 66.81, 23.88, 49.92, 39.21, 7.92, 24.48, 20.62, 13.79, 56.22, 12.84, 35.86, 40.75, 23.23, 25.92, 32.49, 33.83, 26.41, 22.56, 18.83, 22.3, 35.09, 28.78, 32.29, 8.39, 7.38, 43.47, 28.52, 17.58, 33.1, 49.8, 20.39, 43.92, 41.2, 11.41, 34.71, 26.19, 9.99, 36.52, 9.62, 11.56, 202.98, 56.99, 23.69, 76.63, 135.74, 14.29, 29.51, 59.87, 12.71, 43.67, 115.02, 38.17, 32.41, 11.64, 51.93, 19.74, 49.02, 10.65, 18.82, 17.6, 25.14, 100.42, 45.34, 15.96, 15.81, 33.48, 18.29, 32.14, 17.58, 12.07, 19.25, 13.33, 13.54, 20.78, 15.78, 27.97, 121.22, 13.99, 11.22, 18.63, 16.87, 11.57, 41.25, 72.79, 14.65, 66.16, 23.49, 12.75, 22.45, 21.67, 20.98, 55.92, 124.44, 25.93, 25.28, 83.81, 12.26, 12.41, 15.07, 12.65, 75.76, 19.05, 18.72, 22.59, 15.89, 61.16, 18.28, 30.73, 30.28, 8.41, 13.14, 9.8, 140.6, 74.01, 179.21, 12.07, 24.81, 34.37, 28.94, 25.3, 49.18, 9.16, 9.01, 44.58, 31.73, 51.4, 15.5, 96.63, 22.08, 23.24, 12.74, 8.59, 248.5, 9.21, 48.28, 25.46, 11.15, 38.96, 66.5, 69.54, 14.31, 35.52, 18.86, 19.27, 67.4, 95.8, 54.8, 42.45, 17.33, 29.01, 28.74, 62.07, 25.7, 16.9, 19.27, 30.31, 30.82, 11.86, 26.82, 31.27, 11.99, 74.7, 13.24, 17.87, 60.82, 31.19, 10.16, 15.65, 196.87, 23.96, 11.62, 50.4, 13.62, 68.23, 154.87, 10.75, 46.14, 68.5, 45.45, 31.84, 18.45, 29.11, 23.74, 50.84, 17.85, 12.31, 406.46, 62.47, 16.21, 10.4, 46.92, 48.68, 37.32, 57.76, 36.77, 27.2, 86.78, 34.4, 13.05, 65.74, 769.32, 16.05, 19.02, 44.28, 13.14, 25.79, 31.8, 21.51, 24.28, 9.59, 16.85, 7.3, 15.91, 23.09, 48.73, 11.56, 37.03, 21.53, 22.97, 14.01, 43.71, 14.52, 11.34, 19.78, 26.4, 53.4, 48.08, 49.81, 20.06, 13.76, 15.02, 19.76, 28.48, 12.3, 21.86, 12.81, 15.29, 57.95, 40.87, 62.81, 21.42, 32.74, 43.88, 11.56, 94.56, 33.52, 10.51, 62.33, 31.8, 47.41, 160.48, 23.08, 13.59, 21.92, 24.74, 49.05, 78.43, 31.28, 54.27, 50.39, 24.3])
}

dict_img3_data_CORRECT = {
    "control": np.array([14.55, 11.13, 16.17, 19.14, 13.72, 8.94, 21.87, 15.44, 17.49, 16.93, 17.32, 17.48, 12.23, 13.65, 22.4, 17.09, 13.27, 16.96, 15.42, 10.88, 13.76, 14.75, 9.69, 17.11, 12.19, 14.46, 16.3, 14.38, 12.09, 15.86, 18.27, 14.33, 16.97, 22.86, 16.81, 16.96, 16.29, 14.08, 11.16, 18.79, 17.86, 11.24, 14.46, 17.71, 12.77, 14.87, 11.38, 13.13, 14.19, 12.06, 12.3, 13.91, 16.6, 12.29, 11.87, 18.91, 9.03, 17.1, 17.0, 14.91, 15.53, 12.76, 14.08, 14.08, 14.67, 14.98, 10.37, 13.0, 17.83, 11.36, 15.18, 18.26, 18.26, 20.21, 14.23, 16.23, 14.61, 8.38, 21.62, 18.72, 19.89, 17.74, 16.05, 15.57, 13.09, 11.03, 19.6, 16.94, 14.4, 15.18, 13.46, 13.73, 16.91, 15.82, 16.52, 18.17, 8.99, 16.29, 15.11, 11.24, 18.72, 13.92, 15.63, 13.66, 15.03, 16.34, 17.08, 8.25, 16.35, 9.35, 11.29, 15.53, 18.87, 20.8, 17.04, 16.04, 13.3, 15.17, 14.48, 19.41, 13.61, 21.13, 18.46, 12.23, 13.31, 15.31, 20.14, 23.05, 13.0, 16.29, 21.77, 16.11, 15.31, 16.14, 17.4, 20.94, 15.07, 13.26, 16.37, 10.68, 14.38, 12.94, 16.59, 10.74, 14.57, 15.79, 17.73, 19.71, 9.5, 13.97, 14.49, 13.5, 14.72, 19.87, 18.02, 19.99, 13.6, 11.66, 10.92, 18.86, 17.23, 13.93, 16.02, 18.58, 16.49, 13.72, 13.82, 20.65, 21.38, 16.72, 15.18, 15.54, 18.73, 13.63, 15.68, 17.13, 19.75, 10.13, 15.55, 18.2, 18.8, 11.53, 16.98, 16.7, 16.41, 13.43, 17.94, 18.32, 15.6, 19.93, 16.35, 18.68, 15.97, 17.61, 17.0, 16.08, 14.41, 20.96, 18.78, 18.55, 16.93, 16.75, 13.72, 15.78, 15.6, 12.34, 13.06, 13.76, 15.21, 13.39, 16.66, 10.51, 15.02, 13.43, 12.11, 14.74, 10.4, 12.55, 17.8, 19.03, 15.92, 16.36, 12.76, 13.91, 13.91, 16.73, 18.89, 10.69, 12.07, 16.33, 16.46, 18.12, 26.0, 15.71, 14.0, 14.99, 15.08, 13.98, 16.89, 10.15, 12.63, 11.91, 17.14, 18.08, 16.71, 19.12, 13.34, 15.49, 13.88, 18.06, 12.23, 14.3, 14.9, 13.04, 18.62, 13.96, 18.63, 15.77, 18.89, 13.32, 14.36, 16.44, 17.76, 13.65, 18.49, 12.73, 12.64, 13.94, 16.45, 13.81, 15.7, 16.89, 10.23, 14.46, 16.42, 14.98, 19.13, 12.33, 7.74, 14.5, 19.32, 20.78, 15.88, 14.83, 15.27, 10.7, 10.63, 16.02, 12.01, 10.06, 13.62, 16.85, 16.65, 13.51, 11.23, 14.51, 18.84, 17.27, 11.98, 12.1, 20.62, 15.45, 14.7, 12.15, 15.68, 12.29, 5.67, 14.96, 14.31, 19.73, 19.98, 16.87, 15.62, 15.02, 13.94, 11.77, 17.19, 11.83, 18.16, 18.96, 9.85, 14.78, 14.27, 10.87, 13.02, 11.28, 11.17, 17.27, 14.71, 15.21, 19.4, 12.67, 11.24, 10.68, 18.13, 23.59, 17.73, 15.25, 18.7, 11.19, 11.46, 14.24, 10.58, 16.77, 14.64, 17.47, 12.43, 17.39, 14.39, 21.06, 14.06, 14.59, 13.15, 15.56, 14.59, 17.29, 19.58, 14.78, 15.86, 27.0, 16.03, 20.08, 10.9, 13.21, 12.11, 19.38, 14.69, 13.78, 13.84, 18.4, 13.35, 11.08, 16.64, 13.4, 9.97, 17.04, 14.99, 16.68, 11.05, 9.94, 14.44, 24.0, 19.78, 11.73, 18.54, 19.38, 13.24, 16.07, 19.34, 15.77, 7.23, 25.0, 15.1, 15.88, 12.69, 13.88, 14.36, 17.3, 14.17, 12.23]),
    "experimental": np.array([15.2, 13.85, 11.55, 17.37, 12.9, 13.53, 18.22, 24.93, 17.93, 18.6, 12.74, 11.09, 12.24, 12.55, 15.0, 15.96, 14.31, 9.03, 13.68, 11.13, 11.85, 15.84, 15.45, 16.73, 13.9, 15.25, 19.32, 19.98, 11.23, 11.59, 11.4, 15.95, 17.77, 18.13, 17.23, 16.27, 11.31, 16.65, 16.62, 18.41, 19.4, 14.91, 20.39, 16.91, 12.4, 11.38, 12.75, 14.83, 15.48, 19.89, 12.3, 12.33, 21.63, 15.79, 18.63, 14.01, 14.5, 20.25, 13.97, 14.67, 11.05, 17.46, 11.79, 11.03, 13.4, 13.22, 16.11, 18.1, 9.51, 17.46, 12.52, 17.26, 14.67, 13.23, 14.5, 19.78, 16.67, 12.89, 14.94, 14.34, 14.33, 14.31, 16.06, 16.25, 16.71, 13.64, 10.85, 14.43, 17.06, 9.79, 18.39, 15.84, 19.74, 18.11, 13.5, 12.21, 23.19, 8.95, 15.31, 15.55, 12.2, 16.5, 14.75, 14.16, 15.98, 15.68, 18.02, 14.37, 15.71, 16.18, 15.17, 14.07, 17.57, 11.75, 12.46, 16.7, 15.65, 15.87, 12.14, 13.35, 15.83, 14.41, 12.99, 13.11, 15.51, 13.1, 14.53, 15.66, 12.6, 18.41, 16.49, 8.6, 15.21, 15.82, 10.88, 10.65, 16.89, 20.95, 10.41, 7.54, 14.24, 16.27, 15.3, 15.14, 15.11, 16.48, 13.19, 11.41, 12.64, 9.77, 14.62, 11.59, 14.23, 9.82, 15.55, 18.7, 18.75, 18.73, 15.95, 14.14, 11.15, 11.8, 16.69, 14.9, 16.77, 19.14, 20.58, 19.46, 15.3, 16.22, 15.9, 15.77, 19.37, 12.34, 18.11, 16.42, 16.62, 15.73, 15.3, 12.73, 14.45, 14.51, 16.16, 15.44, 19.44, 21.59, 14.07, 15.14, 15.83, 15.69, 16.47, 22.2, 10.75, 13.54, 11.59, 24.17, 13.8, 7.8, 17.13, 13.97, 16.68, 15.91, 13.52, 16.88, 21.41, 16.2, 18.55, 17.88, 15.86, 18.67, 15.96, 13.1, 8.51, 12.24, 16.02, 14.41, 12.08, 13.6, 12.75, 16.01, 13.16, 17.28, 14.05, 14.74, 10.05, 15.63, 17.6, 19.21, 16.68, 14.18, 13.5, 8.23, 10.79, 11.92, 13.35, 14.05, 15.32, 10.39, 10.96, 13.65, 14.59, 10.58, 16.11, 16.72, 12.0, 16.07, 15.58, 11.62, 13.85, 18.46, 15.32, 17.63, 14.18, 19.4, 18.99, 13.1, 17.18, 16.33, 11.27, 18.4, 13.82, 16.8, 19.42, 13.56, 14.24, 17.84, 14.3, 17.63, 18.08, 13.43, 13.15, 12.49, 9.2, 12.86, 12.39, 17.45, 20.53, 13.15, 12.7, 17.74, 16.21, 16.21, 15.05, 13.82, 15.06, 15.59, 6.81, 15.93, 20.67, 14.61, 13.77, 13.29, 9.98, 13.98, 11.46, 17.44, 19.88, 17.51, 13.71, 14.68, 7.93, 17.86, 14.46, 13.73, 12.34, 15.19, 12.49, 11.62, 20.29, 14.23, 10.97, 15.85, 14.37, 12.14, 14.44, 15.09, 17.37, 16.09, 16.38, 16.2, 13.19, 15.86, 15.4, 10.57, 11.54, 15.51, 16.54, 15.59, 10.85, 11.94, 18.45, 18.61, 16.26, 15.36, 14.27, 13.16, 13.35, 11.97, 15.96, 12.36, 10.73, 13.99, 13.6, 15.77, 20.15, 13.13, 14.04, 17.27, 15.62, 22.72, 14.78, 10.65, 19.08, 11.48, 15.59, 13.53, 19.32, 15.6, 13.69, 17.88, 15.09, 17.75, 13.08, 17.24, 15.33, 12.49, 16.07, 9.52, 7.68, 16.36, 9.71, 14.38, 15.22, 13.18, 14.71, 18.42, 17.68, 14.63, 12.7, 13.61, 17.32, 11.49, 11.16, 15.53, 18.78, 20.35, 14.35, 10.46, 14.82, 9.92, 17.24, 16.74, 12.46, 18.13, 12.46, 16.23, 12.57, 10.67, 18.51, 17.97])
}


class Cleaning(PlottingTest):

    def check_hist_subplots(self, figures_user, dict_data_CORRECT, num_of_image, variable_name):
        # to check the second and the third images
        # hs-test sees the image (two subplots) as two figures: the first one for Control,
        # the second one for Experimental (or vice versa).
        graph1_type, graph2_type = figures_user[0].type, figures_user[1].type

        if graph1_type != "hist":
            raise WrongAnswer("The type of the first subplot on the second image is wrong. The histogram is expected.")
        if graph2_type != "hist":
            raise WrongAnswer("The type of the second subplot on the second image is wrong. The histogram is expected.")

        graph1_data, graph2_data = figures_user[0].data.x, figures_user[1].data.x
        if not ((np.array_equal(graph1_data, dict_data_CORRECT["control"]) and
                 np.array_equal(graph2_data, dict_data_CORRECT["experimental"])) or
                (np.array_equal(graph1_data, dict_data_CORRECT["experimental"]) and
                 np.array_equal(graph2_data, dict_data_CORRECT["control"]))):
            raise WrongAnswer(f"Seems like you plotted the wrong data on the image #{num_of_image}.\n"
                              f"Two subplots with histograms of {variable_name} for the control and experimental groups are expected.")

    @dynamic_test
    def test(self):
        pr = TestedProgram()
        output = pr.start().replace(" ", "").lower()

        if len(output.rstrip()) == 0:
            raise WrongAnswer("Seems like your program does not show any output.")

        # check the graph
        all_figures = self.all_figures()
        if len(all_figures) == 0:
            raise WrongAnswer("Looks like you didn't present any plots")
        if len(all_figures) != 6:
            # hs-test sees the first bar plot (Number of sessions) as 2 figures
            # the next four histograms (two subplots for "Order value" and two subplots for "Session duration")
            # hs-test sees as 4 figures.
            # 6 figures in total, but 3 images.
            raise WrongAnswer(f"Expected 3 images.\n"
                              f"The first one for Number of sessions.\n"
                              f"The second one for Order value with two subplots.\n"
                              f"The third one for Session duration with two subplots as well.\n"
                              f"Check the Example section for the correct format.")
        # the first image
        # hs-test sees the first histogram as two figures: the first one for Control,
        # the second one for Experimental (or vice versa).
        graph1_type, graph2_type = all_figures[0].type, all_figures[1].type

        if graph1_type != "bar" or graph2_type != "bar":
            raise WrongAnswer("The type of the first plot is wrong. The bar plot is expected.")

        graph1_data_x, graph1_data_y = all_figures[0].data.x.tolist(), all_figures[0].data.y.tolist()
        graph2_data_x, graph2_data_y = all_figures[1].data.x.tolist(), all_figures[1].data.y.tolist()

        if not ((graph1_data_y == dict_img1_data_CORRECT["control_yaxis"] and
                 graph2_data_y == dict_img1_data_CORRECT["experimental_yaxis"])
                or (graph1_data_y == dict_img1_data_CORRECT["experimental_yaxis"] and graph2_data_y == dict_img1_data_CORRECT["control_yaxis"])):
            raise WrongAnswer("Wrong y-axis data on the first plot.\n"
                              "The number of sessions by day of the month plotted for both Control and Experimental groups is expected.")

        # the second image
        self.check_hist_subplots(figures_user=all_figures[2:4], dict_data_CORRECT=dict_img2_data_CORRECT,
                                 num_of_image=2, variable_name="order value")
        # the third image
        self.check_hist_subplots(figures_user=all_figures[4:], dict_data_CORRECT=dict_img3_data_CORRECT,
                                 num_of_image=3, variable_name="session duration")

        output_splitted = output.split("\n")
        # let's remove all empty lines from user's output
        output_splitted = [line for line in output_splitted if line.strip() != ""]

        if len(output_splitted) != 3:
            raise WrongAnswer(f"Wrong number of non-empty lines in the output of you program.\n"
                              f"Expected 3, found {len(output_splitted)}.\n"
                              f"Check the output format in the Examples section.")
        for key_word in ["Mean", "Standard deviation", "Max"]:
            key_word_raw = key_word.replace(" ", "").lower()
            # check that a key word occurs only once
            if output.count(key_word_raw) != 1:
                raise WrongAnswer(f"Substring \"{key_word}\" should occur once in the output of your program.\n"
                                  f"Found {output.count(key_word_raw)} occurrences.")
            # check the value related to the key word (size of a group)
            answer_user = re.search(f'{key_word_raw}:([+-]?(?:[0-9]*[.])?[0-9]+)', output)
            if answer_user is None:
                raise WrongAnswer(f"Didn't find the value of {key_word.lower()}.\n"
                                  f"Note that you should present its value in the following format:\n"
                                  f"    \"{key_word}: <calculated value>\"")
            if float(answer_user.group(1)) != dict_answers_CORRECT[key_word_raw]:
                raise WrongAnswer(f"The value of {key_word.lower()} is wrong.")

        else:
            return CheckResult.correct()


if __name__ == '__main__':
    Cleaning().run_tests()
