import numpy as np
from hstest import *
import re


def remove_empty_lines(string):
    # removes empty lines from the string
    # returns a list with \n separator
    string_splitted = string.split("\n")
    string_splitted_with_no_empty_lines = [line for line in string_splitted if line.strip() != ""]
    return string_splitted_with_no_empty_lines


class AATest(PlottingTest):
    LEVENE_TEST_NAME = "Levene's test"
    TTEST_NAME = "T-test"
    log_order_value_CORRECT = np.array([1.506297153514587, 4.360036616782266, 3.4442568711226023, 2.991724252156452, 2.254444717666111, 2.847812143477369, 3.4170707308184456, 3.4735180432417816, 2.3233676321765744, 3.6399517804905126, 4.140432666414855, 2.9922261342247034, 2.6665335208992764, 2.8808824318750488, 3.8934516198427107, 3.910822284851627, 3.728100167267218, 3.2311995745570328, 2.4874035299865875, 4.175617282350837, 3.1359289040472746, 2.643333886382519, 2.8920370372152258, 4.2759714333333765, 3.5700959181239695, 2.0980179272527715, 3.652734007477583, 1.827769906751088, 3.1726224403507386, 4.284551613290046, 2.77757626375082, 2.7013612129514133, 2.546315277916644, 3.793014218845944, 4.192227188023968, 4.099000373758295, 2.8384934971274993, 2.4973291697865574, 3.5782271840103412, 2.8864752876170416, 3.3243163373261977, 2.605648267484129, 2.620311286794203, 4.522766359733276, 2.7750856024383683, 2.855895328366192, 3.2676659890376327, 2.624668592163159, 2.5360749363624, 3.7128400915587796, 1.803358605071407, 2.0781907597781832, 3.2476576262936527, 2.0082140323914683, 3.035914063186823, 3.1684242813721024, 3.7549012496559335, 2.512035317176253, 3.7052448082002005, 3.6299253112702656, 2.020222182019865, 3.6344232683178777, 2.0294631718735947, 3.2367157429965316, 2.6108048166633746, 2.8684669225081145, 2.449279472144849, 2.570319527636131, 3.5759906720353185, 4.1170840491915905, 3.710151589389476, 2.617395832834079, 2.4907230351094403, 4.229749199228304, 3.761665123839584, 3.34779660493504, 3.7623622308737397, 1.4701758451005926, 3.3881121421135, 4.450619426139493, 3.7121075802331434, 4.263806003286451, 2.847232265235547, 3.3463891451671604, 4.060443010546419, 2.6411978941143697, 3.8877303128591016, 2.336986519711378, 2.8039662579320366, 2.9601050959108397, 3.2850380271218693, 3.4685444551217657, 3.565298392342582, 3.9502817175452365, 1.7173950539391927, 4.51830425296643, 1.965712776351493, 2.551006451492524, 3.2136622578153133, 2.800325477211381, 2.9590682891823996, 2.691243082785829, 2.5855058483441162, 2.706048198431537, 2.9481164196123277, 2.2915241456346207, 5.048059522742255, 2.5900171341906173, 1.1505720275988207, 3.0411835364579085, 3.9941558349666684, 1.55814461804655, 3.7220724214697003, 3.273742726309041, 3.638375321940168, 4.830790667177194, 3.916413353729439, 3.694612985961697, 3.6483178423578133, 3.2932409068235073, 3.4483989831464497, 1.840549633397487, 2.186051276738094, 4.781725147887709, 2.4203681286504293, 4.257454983420831, 3.2891478778535324, 2.8786365016777435, 2.8780742300857587, 3.43204984514492, 4.231639696410273, 3.6344232683178777, 2.653241964607215, 4.50678528406669, 2.048982334195127, 2.47232786758114, 2.2874714551839976, 2.613739521630969, 3.0969341540629585, 3.286160571673797, 5.304846008510737, 3.807550983831435, 3.3530570063342204, 4.2615524812060075, 3.6378492830011573, 3.4339872044851463, 2.388762789235098, 3.772990796732589, 1.3480731482996928, 3.9865737366924425, 3.5421180727185324, 3.7653774250866614, 4.102312731871278, 2.020222182019865, 3.1896529661912973, 0.8796267475025636, 2.5626389983283526, 3.0411835364579085, 3.226447090364519, 2.9616582932202395, 3.644143560272545, 3.176803048446293, 2.6232182655855123, 1.803358605071407, 3.4258899942525267, 2.4706386779902956, 3.811539466849824, 3.0209125720842893, 2.545531271604435, 1.922787731634459, 3.110845080654496, 0.8712933659434193, 2.503073953743449, 3.644666299437611, 4.2271256734559195, 0.26236426446749106, 3.3170908723651555, 2.8986705607108596, 3.1175073304799117, 4.50413364181032, 1.8341801851120072, 3.692373343368192, 3.270708973508218, 5.003073441888966, 2.3523271848888596, 3.4651107074058083, 3.125882958019036, 2.427454075039915, 3.1742967814702334, 3.1402654242862895, 2.166765369851511, 3.070375816549757, 1.0043016091968684, 4.7295977643631435, 5.124202046301181, 3.9431340004531985, 3.443298557680791, 4.15166962884137, 2.0412203288596382, 3.0081547935525483, 4.0920085024245525, 2.157559320943788, 3.1692653243148663, 4.193133532496888, 3.839667343236006, 2.5217206229107165, 1.6389967146756448, 2.4765384001174837, 1.9035989509835904, 1.536867219599265, 3.4372078191851885, 2.5128460184772416, 2.8881470628740535, 3.0160249768217535, 3.3572454941329726, 2.785011242238338, 5.1343267664388055, 3.3965197921110444, 5.283102200741556, 1.715598108262491, 3.5130368634176907, 3.6354786773868213, 2.4518667957098, 2.916689066213538, 2.4664031782234406, 0.371563556432483, 2.649714624089247, 3.26918863874179, 3.443937535338314, 2.9085390618516134, 2.9172300453990334, 2.9486406660201405, 2.6217658325051976, 3.319263998899469, 3.4660483539817717, 3.4763048541489607, 2.0215475632609334, 1.8578592709325787, 3.100092288878234, 1.9919755158985601, 2.703372611551099, 2.8069901489571136, 1.2612978709452054, 4.375379591952088, 2.6993457604720636, 4.698205051955281, 4.130837198581126, 4.097007679641584, 4.033709523684745, 3.82319179172153, 3.865560131017805, 2.451005098112319, 2.7593768282675506, 1.715598108262491, 4.7066431549187255, 2.968361076757859, 2.9375733593804587, 4.290459441148391, 4.008786673860454, 2.5718485799218085, 3.2164729402518906, 3.8019849002192085, 4.166355098198373, 3.8651410195280156, 2.554121718809473, 2.5603232890727545, 3.7932394694381792, 3.2088254890146994, 3.211649779776461, 4.2018527699373855, 3.1730412885244013, 3.9104217240611723, 3.6689318163042404, 2.0831845279586703, 2.0693912058263346, 3.1978564576441255, 3.026261478588814, 3.8768102496724017, 2.6239436918052106, 4.029272565478386, 1.9416152247724325, 2.4740142086215764, 2.552565298261815, 2.905807566026004, 3.5796224681769866, 2.7806808921371173, 3.7074558396868715, 3.145444546782318, 2.583997552432231, 3.3513066120486905, 3.255014871484074, 3.480932349681009, 3.521347982792617, 3.273742726309041, 3.1161784266298582, 2.935451342669061, 4.0040550908746395, 3.104586678466073, 2.1424163408412245, 3.5579161895951237, 5.251592568041801, 3.359680701459222, 3.4747575847701837, 2.127040520479115, 1.998773638612381, 3.772071045000701, 1.2864740258376797, 3.3506055955460954, 3.723522397557476, 3.701548857214599, 2.543175557911976, 2.866761892257031, 2.6567569067146595, 2.432735777459091, 3.4995332823830174, 3.9080149840306073, 4.107754249132018, 3.997833661841257, 3.015044584586364, 3.7823697972012753, 2.9069010598473755, 3.7184382563554808, 1.6752256529721035, 2.4344901638739844, 3.547027829873695, 3.2519236789144013, 3.2653776585196206, 2.080690761080268, 2.808800104202353, 2.301584592660462, 4.497584975308154, 3.597860055726768, 2.263844264677615, 2.4475508632442313, 5.313107452020672, 4.0428758138469085, 4.198254025612612, 3.165053018170694, 4.3389886449823125, 3.6581624814518756, 4.910741291275612, 3.4741380060638707, 2.659559991941776, 1.6524974018945473, 3.3847291889548483, 4.092175544937261, 2.542389085201363, 3.7766613674974696, 1.9080599249242156, 3.9512437185814275, 4.745106026285608, 3.6420498667571386, 2.1938856760707046, 1.9095425048844386, 3.4784670171534557, 2.454447442303292, 3.7823697972012753, 3.9498966578562276, 2.9826470340053355, 2.182674796321488, 2.365559892155434, 3.0155349008501706, 3.1908877883280318, 2.9349201341572337, 2.8678989020441064, 3.2244602031621015, 3.466672963621067, 2.5249283241374862, 3.624607564093796, 2.1041341542702074, 5.0878432183344895, 2.8887037007954675, 4.609361390606559, 2.8758219768814333, 3.385067999732272, 3.814189645079383, 2.7700855920216627, 2.7606426512213806, 1.7900914121273581, 3.5109482456212744, 3.385067999732272, 2.9517803860248084, 2.5710843460290524, 1.9095425048844386, 3.012097627640255, 2.906354462402774, 3.4701013603093664, 2.866761892257031, 2.4907230351094403, 2.9575110607337933, 2.5900171341906173, 2.386006701133118, 3.471034341250935, 5.154504731182189, 1.1662709371419244, 1.937301774518713, 3.3921566370100065, 2.605648267484129, 3.0339909856710814, 1.8946168546677629, 3.005187432324746, 4.280270725719494, 2.7587433154177283, 3.3311325072138684, 4.86553244778491, 4.797607076523139, 2.63834278867739, 2.4176979000945504, 2.924773184613497, 4.691531351636135, 1.7298840655099674, 2.825536896557877, 2.934388643312939, 2.448415541205585, 2.9311937524164198, 3.71965111278069, 5.098340874515361, 4.287578583130166, 2.6844403354630764, 2.2512917986064953, 4.1920760507154355, 3.1565747986708215, 2.545531271604435, 3.089677886396519, 5.008766883036229, 3.1112906141882632, 1.33500106673234, 3.3703944725071104, 3.075928815548268, 3.043569602968151, 3.2767673032839784, 4.0239220979255546, 3.314913013065143, 2.883682769745368, 3.7537304264335525, 3.250374491927572, 4.8238236720294365, 2.8616292890305104, 3.2304090606818736, 4.17315574264639, 3.2188758248682006, 3.1328821117012247, 3.255400599550573, 3.2300135692786567, 4.428552332110815, 2.506341930508065, 2.5185025992165158, 2.712706012638404, 2.5376572151735295, 4.327570448877823, 2.8853592160726205, 2.94706710157271, 2.929592471049446, 2.9851767596144745, 1.4816045409242156, 4.102643365036796, 3.2573270112424533, 3.1175073304799117, 2.7656899805486246, 4.113493381060861, 2.905807566026004, 2.169053700369523, 3.425239376142393, 4.455393260669863, 1.9110228900548727, 3.410487428569248, 3.434954478460289, 2.1294214739848565, 2.280339484046726, 2.5756610130564646, 1.958685340544036, 2.2823823856765264, 5.2745880398488, 3.9863880873834527, 4.9459189793765646, 4.304200219209375, 2.7638002162067017, 2.8831233291713367, 3.7796338173824005, 5.188558302555298, 2.4907230351094403, 3.21124679770371, 3.5371840908617425, 3.1126260250254902, 3.208017081533325, 2.837908188360424, 2.744060638625243, 4.902307417210627, 3.5544905510752844, 3.365224721203338, 3.2308043957334744, 2.6932749155200555, 3.8954870367880465, 4.675162557808126, 2.214846178686039, 2.4790562361098245, 1.9530276168241774, 2.7517480563679295, 2.1983350716202463, 4.039712366569035, 3.797285327957723, 3.6750340472918834, 3.4572626055951043, 3.9396381724611196, 2.740840023925201, 4.570889252011217, 3.0946722214088944, 3.1458749319837103, 2.5447466501440172, 2.150598735996164, 2.2202898502672155, 3.8770173962293306, 3.2371085931292605, 2.411439497906128, 3.6625354787743345, 4.197201947661808, 4.241902126579715, 2.6609585935683597, 3.5700959181239695, 2.937043277205311, 2.958549482426275, 3.0717669598299886, 1.803358605071407, 3.730740908208854, 2.87751164216656, 4.210645017918261, 1.7263316639055997, 2.5664866367804233, 3.035914063186823, 0.4382549309311553, 2.2935443483418965, 2.5687881337687024, 3.9316295350670645, 4.09717388923226, 3.1616703510974213, 2.5079719227189963, 4.562262684976814, 2.5087859235779435, 3.461978853922014, 4.00369019395397, 2.298577071596507, 1.965712776351493, 2.930660276810276, 1.9198594718553708, 4.354269957628839, 3.6826098411003407, 3.074543453978281, 3.946617650192645, 1.2781522025001875, 3.2634667081960758, 3.7483269127573564, 2.281361456542419, 3.34533224882076, 3.39484390768998, 3.12412548832239, 4.068684815441523, 3.495294705041271, 3.2296179214001026, 2.030776369698555, 3.664586761544892, 3.551340040091875, 2.8524391037275145, 3.367640598133313, 1.7681496035889213, 2.7414849771884473, 3.358289880650879, 3.4784670171534557, 4.128262780425561, 2.8466520505398383, 2.6823904543216326, 2.1174596088673567, 3.533102452542094, 2.052840859882657, 3.054001181677967, 3.6449275665847534, 3.4265401893339504, 3.819469023817538, 3.711618941083426, 1.7227665977411035, 3.246490991901174, 3.8031005982039594, 2.8273136219290276, 2.551006451492524, 2.958549482426275, 1.7749523509116738, 3.7443141610020367, 3.4114776910697118, 4.282620578207235, 3.42816382989197, 3.250374491927572, 3.9104217240611723, 2.4731713935695794, 3.2891478778535324, 4.135486505553276, 2.551786178627545, 3.44265917146975, 2.4840729690394228, 4.3134800921387715, 2.5832425505088623, 2.8831233291713367, 4.107918682249219, 2.2834022735772717, 3.440097530619712, 2.318458442150336, 2.750470916986162, 3.299533727885655, 5.282543612431996, 4.188896879163323, 3.2088254890146994, 3.1763857732472487, 2.4527277514237653, 3.919991175077323, 3.6691868207682004, 2.451005098112319, 2.2289385528257473, 2.611539300721366, 4.222884350827332, 3.8271184983377022, 3.5624655292582776, 5.0425860553280835, 3.858622228701031, 3.7395725684294545, 2.3749057545736716, 3.8316802527456075, 4.22683374526818, 3.816612820623488, 3.030616675407493, 3.460723360976182, 4.650908077661946, 2.915064370486536, 2.3841650799864684, 0.9516578757114463, 3.371081757757532, 3.167161389181522, 3.928683446321253, 1.1019400787607843, 3.548179572010801, 2.8820035082256483, 2.510411940196362, 4.774406503233391, 2.831447079246135, 4.134686441505479, 2.785628335747585, 2.341805806147327, 1.425515074273172, 3.848444023785275, 3.5516268606875596, 1.3837912309017721, 3.8852682681193262, 3.619529375979143, 4.746843344304237, 1.979621206397625, 4.090001812787964, 5.040064638120259, 4.05629649458457, 2.0347056478384444, 2.7356653681351832, 3.0809921175048145, 4.201553368737545, 3.6046822953131805, 3.3032169733019514, 4.219654753187547, 4.204692619390966, 4.463376180370204, 3.5380565643793527, 2.1150499691472033, 3.5959414584546674, 4.296877159632186, 2.5687881337687024, 2.6748380668960965, 4.185707568236073, 3.731220294603461, 3.5610460826040513, 2.2669579153508947, 1.682688374173693, 2.775708849576025, 0.6523251860396901, 2.306577114263583, 2.9454910571172443, 1.6882490928583902, 3.790533107840436, 1.918392120161421, 2.7427736371605955, 2.5756610130564646, 3.2499868198932536, 3.62886402170395, 1.8421356765531218, 3.4183822064162563, 3.459466289786131, 3.068517943279639, 2.307572634505085, 3.1896529661912973, 2.2607208888953467, 2.8243506567983707, 1.9878743481543455, 2.7669478423496954, 3.139399623366404, 3.8862948568554145, 2.4475508632442313, 3.6117283949255214, 3.0694473113762717, 3.134189016701007, 2.6397713603489157, 3.7775769088752233, 2.67552700939665, 2.428336298299606, 2.984671326194566, 4.026600910135581, 4.010238052925101, 3.2733640101522705, 0.3220834991691132, 2.767576180416237, 3.5028510353886553, 2.0541237336955462, 3.672241812960913, 3.623540612805596, 3.977810745966149, 3.872866290226952, 3.1144038032714896, 3.908215767085192, 3.326114575537799, 2.9987277825337895, 3.3160025355989236, 2.6217658325051976, 1.8468787684491346, 2.7093826463359885, 2.7067159780890733, 2.983659692319722, 4.117409835153096, 3.349202086543775, 2.509599262378372, 3.0846584827483925, 2.872999508171694, 3.572345637857985, 2.550226115908643, 4.031227252906622, 2.727199019940971, 4.641984159110808, 4.059580569785761, 3.7103962975761857, 3.3134584673541485, 4.140114296466289, 3.2300135692786567, 3.064325065019603, 3.7828250669564643, 3.488597571942989, 4.4836802884003815, 4.09817056705563, 3.7814586354070294, 2.4475508632442313, 4.549234553657788, 3.5121422756138823, 2.3523271848888596, 2.791165107812717, 4.132442850820759, 3.459466289786131, 2.5855058483441162, 2.9806186357439426, 4.014218517742816, 3.1978564576441255, 3.779862101825807, 2.0268315914075385, 3.8588331769140267, 2.449279472144849, 5.078169324213626, 3.5536323047059106, 4.54775291511814, 3.4735180432417816, 3.138966441639899, 2.6093342281630525, 3.087399462079815, 3.208421366964342, 3.271088696315135, 3.157425862551978, 3.892840186011372, 4.435448911169876, 4.362206507224575, 2.2049722641270453, 3.4429789156771102, 3.9939715880753135, 2.199444334074532, 3.9197927426925068, 3.190476350346503, 3.54558628428746])

    def check_format_of_output(self, test_name, output_user):
        test_name_raw = test_name.replace(" ", "").lower()
        if test_name_raw not in output_user:
            raise WrongAnswer(f"Didn't find \"{test_name}\" substring in the output. Check the output format in the Examples section.")

        if output_user.count(test_name_raw) != 1:
            raise WrongAnswer(f"Substring \"{test_name}\" occurs more than once. Check the output format in the Examples section.")

    def check_parameter_value(self, output_user, test_name, parameter_name, parameter_CORRECT):
        parameter_user = re.search(f'{parameter_name.lower()}=([+-]?(?:[0-9]*[.])?[0-9]+)', output_user)
        if parameter_user is None:
            raise WrongAnswer(f"Didn't find the value of {parameter_name} in the 1st line of {test_name} results.\n"
                              f"Note that you should present its value in the following format: {parameter_name} = <calculated value>.")
        parameter_user = float(parameter_user.group(1))
        if abs(parameter_CORRECT - parameter_user) > 1e-3:
            raise WrongAnswer(f"The value of {parameter_name}-statistics is wrong")

    def check_pvalue(self, output_user, test_name, pvalue_CORRECT, pvalue_WRONG):
        if output_user.count("p-value") != 1:
            raise WrongAnswer(f"Substring \"p-value\" should occur once in the 1st line of {test_name} results.\n"
                              f"Found {output_user.count('p-value')} occurrences.")
        if pvalue_WRONG in output_user or pvalue_CORRECT not in output_user:
            raise WrongAnswer(f"{test_name} p-value is wrong.\n"
                              f"Note that there are only two options: p-value <= 0.05 or p-value > 0.5.")

    def check_null_hypothesis(self, output_user, test_name, answer_CORRECT, answer_WRONG):
        if output_user.count("rejectnullhypothesis:") != 1:
            raise WrongAnswer(
                f"Substring \"Reject null hypothesis:\" should occur once in the 2nd line of {test_name} results.\n"
                f"Found {output_user.count('rejectnullhypothesis:')} occurrences.\n"
                f"Check the output format in the Examples section. Make sure there is no typos in the output of your program.")
        if answer_WRONG in output_user or answer_CORRECT not in output_user:
            raise WrongAnswer(f"Conclusion on {test_name} null hypothesis is wrong.")

    def check_equality(self, output_user, equality_parameter, test_name, answer_CORRECT, answer_WRONG):
        if output_user.count(f"{equality_parameter.lower()}areequal:") != 1:
            raise WrongAnswer(
                f"Substring \"{equality_parameter} are equal:\" should occur once in the 3rd line of {test_name} results.\n"
                f"Found {output_user.count(f'{equality_parameter}areequal:')} occurrences.\n"
                f"Check the output format in the Examples section. Make sure there is no typos in the output of your program.")
        if answer_WRONG in output_user or answer_CORRECT not in output_user:
            raise WrongAnswer(f"Conclusion on equality in {test_name} is wrong.")

    @dynamic_test
    def test(self):
        pr = TestedProgram()
        output = pr.start().replace(" ", "").lower()

        if len(output.strip()) == 0:
            raise WrongAnswer("Seems like your program does not show any output")

        # check the graph
        all_figures = self.all_figures()
        if len(all_figures) == 0:
            raise WrongAnswer("Looks like you didn't present a plot of log-transformed order value")
        if len(all_figures) != 1:
            raise WrongAnswer(f"Expected 1 plot, found {len(all_figures)}")

        graph_type, graph_data = all_figures[0].type, all_figures[0].data.x
        # check the type of the graph
        if graph_type != "hist":
            raise WrongAnswer(f"The type of the plot is wrong. The histogram is expected.")
        log_order_value_user = np.array(graph_data, dtype=float)
        # check that plotted variable has the right length
        if graph_data.shape[0] != self.log_order_value_CORRECT.shape[0]:
            raise WrongAnswer("The length of the variable you plotted is wrong")
        # check the variable element-wise
        try:
            is_data_correct = np.allclose(log_order_value_user, self.log_order_value_CORRECT, rtol=1e-3)
        except Exception:
            raise WrongAnswer("Seems like you plotted the distribution of the wrong variable.\n"
                              "Make sure that you're working with order value variable and you applied the log-transformation.")

        if not is_data_correct:
            raise WrongAnswer("Seems like you plotted the distribution of the wrong variable.\n"
                              "Make sure that you're working with order value variable and you applied the log-transformation.")

        # check output format
        for test_name in [self.LEVENE_TEST_NAME, self.TTEST_NAME]:
            self.check_format_of_output(test_name=test_name,
                                        output_user=output)

        if not output.index(self.LEVENE_TEST_NAME.replace(" ", "").lower()) < output.index(self.TTEST_NAME.replace(" ", "").lower()):
            raise WrongAnswer(f"{self.LEVENE_TEST_NAME} results should be located before {self.TTEST_NAME} results.\n"
                              "Check the output format in the Examples section.")

        levene = output.split("t-test")[0]
        ttest = "t-test" + output.split("t-test")[1]

        levene_splitted = remove_empty_lines(levene)
        ttest_splitted = remove_empty_lines(ttest)

        for lines, test_name in [(levene_splitted, self.LEVENE_TEST_NAME), (ttest_splitted, self.TTEST_NAME)]:
            if len(lines) != 4:
                raise WrongAnswer(f"The number of lines in {test_name} results is wrong.\n"
                                  f"Expected 4, found {len(lines)}.\n"
                                  f"Make sure that you provide test results in the correct format.")
        # check parameter value
        for info in [(levene_splitted[1], self.LEVENE_TEST_NAME, "W", 30.174),
                     (ttest_splitted[1], self.TTEST_NAME, "t", -5.859)]:
            self.check_parameter_value(*info)
        # check p-value
        for info in [(levene_splitted[1], self.LEVENE_TEST_NAME, "p-value<=0.05", "p-value>0.05"),
                     (ttest_splitted[1], self.TTEST_NAME, "p-value<=0.05", "p-value>0.05")]:
            self.check_pvalue(*info)
        # check conclusion on null hypothesis
        for info in [(levene_splitted[2], self.LEVENE_TEST_NAME, "yes", "no"),
                     (ttest_splitted[2], self.TTEST_NAME, "yes", "no")]:
            self.check_null_hypothesis(*info)
        # check conclusion on equality
        for info in [(levene_splitted[3], "Variances", self.LEVENE_TEST_NAME, "no", "yes"),
                     (ttest_splitted[3], "Means", self.TTEST_NAME, "no", "yes")]:
            self.check_equality(*info)

        return CheckResult.correct()


if __name__ == '__main__':
    AATest().run_tests()